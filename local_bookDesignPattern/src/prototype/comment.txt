prototypeはひとことで言うと、「コピーしてインスタンスを作る」

・種類がおおくてクラスをまとめづらい場合
　→スーパクラスの型を使用し、まとめやすくする。

・クラスからのインスタンス生成が難しい場合
　→prototypeパターンを使わないときはnewして、
　各インスタンスのフィールド値をセットする必要があり、場合によっては結構しんどい。
　prototypeパターンでは、フィールド値にとらわれずにインスタンスのコピーが出来るようにする。

・フレームワークと生成するインスタンスを分けたい場合
　→簡単にいうと、「new フレームワークのクラス名」としてやると、使う側としてはフレームワークの
　構造を理解する必要があるので、めんどう。
　「new フレームワークのクラス名」ではなく、サンプルのように辞書型に格納されている文字列指定
　するだけで呼び出せるような構造にすると、使う側としては何を使うのかはっきりして、事故も少なくなる。

※多分↑みたいなことを言いたいんだと思う。本のまま「フレームワークと生成する...」と持ってきたけど、
　現時点では、表現が難解な気がする。本p82の上の方に書いてある、
　「クラス名の束縛からフレームワークを分離している...」を題に持ってきた方が分かりやすい気がする。
-------------------------------------------------------------------

作り方～～～
1. 抽象クラスorインターフェイスを作り、メソッドを定義する。
　（場合によっては、cloneインターフェイスを継承する）

2. 1.の実装クラスを作る。
　この際、実装クラスには自身のコピーを作るメソッドを置いておく

3. 1.2.を保存する構造(mapとか)と、インスタンスを生成するメソッドを用意しておく

4. 実際に使うクラス(mainとか)。3.で定義した保存する構造を使って、2.を入れておく
　（コピーする前には、コピー元のインスタンスを用意、保存しておく必要がある）
　3.で定義したインスタンスを生成するメソッドを使って、コピーを作る。 

-------------------------------------------------------------------
cloneを使うと浅いコピー（参照のコピーとなる）
浅いコピーで足りない場合は、cloneメソッドをオーバーライドして実装する必要がある。
また、cloneはprotectedになっているため、継承関係のないクラスをcloneで呼び出しづらく、
事故りやすい。そのため、なるべくコピーコンストラクタやコピーファクトリーを使う。
サンプル参照。

-------------------------------------------------------------------
@startuml
class Client
interface Prototype{
	createCopy
}
class ConcretePrototype{
	createCopy
}

Client -right-> Prototype:Uses
Prototype <|--ConcretePrototype

note top of Prototype: "abstract or interface"



@enduml
